import { useRef, useEffect } from 'react';

function useEffectX(callback, dependency) {
  var dependencyRef = useRef(null);
  var changedDependencyRef = useRef(null);
  var callbackRef = useRef(callback);
  callbackRef.current = callback;
  useEffect(function () {
    if (dependency) {
      if (dependencyRef.current) {
        changedDependencyRef.current = dependency.map(function (elem, index) {
          var _dependencyRef$curren, _dependencyRef$curren2;

          if (((_dependencyRef$curren = dependencyRef.current) === null || _dependencyRef$curren === void 0 ? void 0 : _dependencyRef$curren[index]) === elem) {
            return {
              previous: elem,
              next: elem,
              changed: false
            };
          }

          return {
            previous: (_dependencyRef$curren2 = dependencyRef.current) === null || _dependencyRef$curren2 === void 0 ? void 0 : _dependencyRef$curren2[index],
            next: elem,
            changed: true
          };
        });
      } else {
        changedDependencyRef.current = dependency.map(function (elem) {
          return {
            previous: undefined,
            next: elem,
            changed: true,
            isFirstRun: true
          };
        });
      }
    }

    callbackRef.current({
      changedItem: changedDependencyRef.current
    });
    dependencyRef.current = dependency;
  }, [].concat(function () {
    if (Array.isArray(dependency)) {
      return [dependency];
    } else {
      return [Math.random()];
    }
  }(), [changedDependencyRef]));
}

export { useEffectX };
//# sourceMappingURL=use-effect-x.esm.js.map
